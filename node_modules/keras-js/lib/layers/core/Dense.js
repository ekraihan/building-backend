'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _activations = require('../../activations');

var activations = _interopRequireWildcard(_activations);

var _Tensor = require('../../Tensor');

var _Tensor2 = _interopRequireDefault(_Tensor);

var _Layer2 = require('../../Layer');

var _Layer3 = _interopRequireDefault(_Layer2);

var _ndarrayBlasLevel = require('ndarray-blas-level2');

var _ndarrayOps = require('ndarray-ops');

var _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Dense layer class
 */
var Dense = function (_Layer) {
  _inherits(Dense, _Layer);

  /**
   * Creates a Dense layer
   * @param {number} attrs.outputDim - output dimension size
   * @param {Object} [attrs] - layer attributes
   */
  function Dense() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Dense);

    var _this = _possibleConstructorReturn(this, (Dense.__proto__ || Object.getPrototypeOf(Dense)).call(this, attrs));

    _this.layerClass = 'Dense';

    var _attrs$outputDim = attrs.outputDim,
        outputDim = _attrs$outputDim === undefined ? 1 : _attrs$outputDim,
        _attrs$activation = attrs.activation,
        activation = _attrs$activation === undefined ? 'linear' : _attrs$activation,
        _attrs$inputDim = attrs.inputDim,
        inputDim = _attrs$inputDim === undefined ? null : _attrs$inputDim,
        _attrs$bias = attrs.bias,
        bias = _attrs$bias === undefined ? true : _attrs$bias;


    _this.activation = activation;
    _this.activationFunc = activations[activation];
    _this.outputDim = outputDim;
    _this.inputDim = inputDim;
    _this.bias = bias;

    // Layer weights specification
    _this.params = _this.bias ? ['W', 'b'] : ['W'];

    // Input shape specification
    if (_this.inputDim) {
      _this.inputShape = [_this.inputDim];
    }

    // Enable layer gpu +/- pipeline mode if supported
    if (_this.gpu && weblas) {
      _this._useWeblas = true;
      _this._pipelineEnabled = false;
    }
    return _this;
  }

  /**
   * Method for setting layer weights. Extends `super` method.
   * @param {Tensor[]} weightsArr - array of weights which are instances of Tensor
   */


  _createClass(Dense, [{
    key: 'setWeights',
    value: function setWeights(weightsArr) {
      _get(Dense.prototype.__proto__ || Object.getPrototypeOf(Dense.prototype), 'setWeights', this).call(this, weightsArr);

      if (this._useWeblas) {
        this.weights.W.createWeblasTensor();
        if (!this.weights.W._gpuMaxSizeExceeded) {
          this.weights.W.weblasTensor = this.weights.W.weblasTensor.transpose();
        }
        if (this.bias) {
          this.weights.b.createWeblasTensor();
        } else {
          this._zerosVec = new _Tensor2.default([], [this.weights.W.tensor.shape[1]]);
          this._zerosVec.createWeblasTensor();
        }
      }
    }

    /**
     * Method for layer computational logic
     *
     * x = W^T * x + b
     *
     * weblas notes:
     * sgemm(M, N, K, alpha, A, B, beta, C), where A, B, C are Float32Array
     * - alpha * A * B + beta * C
     * - A has shape M x N
     * - B has shape N x K
     * - C has shape M x K
     *
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: 'call',
    value: function call(x) {
      var y = new _Tensor2.default([], [this.outputDim]);

      if (this._useWeblas) {
        x.createWeblasTensor();
      }

      if (this._useWeblas && !(x._gpuMaxSizeExceeded || this.weights.W._gpuMaxSizeExceeded)) {
        var bias = this.bias ? this.weights.b.weblasTensor : this._zerosVec.weblasTensor;
        y.tensor.data = weblas.pipeline.sgemm(1, x.weblasTensor, this.weights.W.weblasTensor, 1, bias).transfer();
      } else {
        if (this.bias) {
          _ndarrayOps2.default.assign(y.tensor, this.weights.b.tensor);
        }
        (0, _ndarrayBlasLevel.gemv)(1, this.weights.W.tensor.transpose(1, 0), x.tensor, 1, y.tensor);
      }
      x.tensor = y.tensor;

      this.activationFunc(x);

      return x;
    }
  }]);

  return Dense;
}(_Layer3.default);

exports.default = Dense;