'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _activations = require('../../activations');

var activations = _interopRequireWildcard(_activations);

var _Tensor = require('../../Tensor');

var _Tensor2 = _interopRequireDefault(_Tensor);

var _Layer2 = require('../../Layer');

var _Layer3 = _interopRequireDefault(_Layer2);

var _ndarrayOps = require('ndarray-ops');

var _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);

var _ndarrayGemm = require('ndarray-gemm');

var _ndarrayGemm2 = _interopRequireDefault(_ndarrayGemm);

var _checkPipelineSupport = require('../../utils/checkPipelineSupport');

var _checkPipelineSupport2 = _interopRequireDefault(_checkPipelineSupport);

var _WebGLConv2D = require('../../ext/convolutional/WebGLConv2D');

var _WebGLConv2D2 = _interopRequireDefault(_WebGLConv2D);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Convolution2D layer class
 */
var Convolution2D = function (_Layer) {
  _inherits(Convolution2D, _Layer);

  /**
   * Creates a Convolution2D layer
   * @param {number} attrs.nbFilter - Number of convolution filters to use.
   * @param {number} attrs.nbRow - Number of rows in the convolution kernel.
   * @param {number} attrs.nbCol - Number of columns in the convolution kernel.
   * @param {Object} [attrs] - layer attributes
   */
  function Convolution2D() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Convolution2D);

    var _this = _possibleConstructorReturn(this, (Convolution2D.__proto__ || Object.getPrototypeOf(Convolution2D)).call(this, attrs));

    _this.layerClass = 'Convolution2D';

    var _attrs$nbFilter = attrs.nbFilter,
        nbFilter = _attrs$nbFilter === undefined ? 1 : _attrs$nbFilter,
        _attrs$nbRow = attrs.nbRow,
        nbRow = _attrs$nbRow === undefined ? 3 : _attrs$nbRow,
        _attrs$nbCol = attrs.nbCol,
        nbCol = _attrs$nbCol === undefined ? 3 : _attrs$nbCol,
        _attrs$activation = attrs.activation,
        activation = _attrs$activation === undefined ? 'linear' : _attrs$activation,
        _attrs$borderMode = attrs.borderMode,
        borderMode = _attrs$borderMode === undefined ? 'valid' : _attrs$borderMode,
        _attrs$subsample = attrs.subsample,
        subsample = _attrs$subsample === undefined ? [1, 1] : _attrs$subsample,
        _attrs$dimOrdering = attrs.dimOrdering,
        dimOrdering = _attrs$dimOrdering === undefined ? 'tf' : _attrs$dimOrdering,
        _attrs$bias = attrs.bias,
        bias = _attrs$bias === undefined ? true : _attrs$bias;


    _this.kernelShape = [nbFilter, nbRow, nbCol];

    _this.activation = activation;
    _this.activationFunc = activations[activation];

    if (borderMode === 'valid' || borderMode === 'same') {
      _this.borderMode = borderMode;
    } else {
      throw new Error(`${_this.name} [Convolution2D layer] Invalid borderMode.`);
    }

    _this.subsample = subsample;

    if (dimOrdering === 'tf' || dimOrdering === 'th') {
      _this.dimOrdering = dimOrdering;
    } else {
      throw new Error(`${_this.name} [Convolution2D layer] Only tf and th dim ordering are allowed.`);
    }

    _this.bias = bias;

    // Layer weights specification
    _this.params = _this.bias ? ['W', 'b'] : ['W'];

    // Enable layer gpu +/- pipeline mode if supported
    if (_this.gpu && weblas) {
      _this._useWeblas = true;
      if (_this.pipeline) {
        var isPipelineModeSupported = (0, _checkPipelineSupport2.default)(_this.layerClass, attrs);
        if (isPipelineModeSupported) {
          _this._pipelineEnabled = true;
          _this.webglConv2D = new _WebGLConv2D2.default();
        } else {
          _this._pipelineEnabled = false;
        }
      }
    }
    return _this;
  }

  /**
   * Method for setting layer weights. Extends `super` method.
   * W weight tensor is converted to `tf` mode if in `th` mode.
   * In `tf` mode, W weight tensor has shape [nbRow, nbCol, inputChannels, nbFilter]
   * In `th` mode, W weight tensor has shape [nbFilter, inputChannels, nbRow, nbCol]
   * @param {Tensor[]} weightsArr - array of weights which are instances of Tensor
   */


  _createClass(Convolution2D, [{
    key: 'setWeights',
    value: function setWeights(weightsArr) {
      if (this.dimOrdering === 'th') {
        weightsArr[0].tensor = weightsArr[0].tensor.transpose(2, 3, 1, 0);
      }
      _get(Convolution2D.prototype.__proto__ || Object.getPrototypeOf(Convolution2D.prototype), 'setWeights', this).call(this, weightsArr);

      this._w2row();
      if (this._useWeblas) {
        this._wRowsMat.createWeblasTensor();
        if (!this._wRowsMat._gpuMaxSizeExceeded) {
          this._wRowsMat.weblasTensor = this._wRowsMat.weblasTensor.transpose();
        }
        if (this.bias) {
          this.weights.b.createWeblasTensor();
        } else {
          this._zerosVec = new _Tensor2.default([], [this.weights.W.tensor.shape[3]]);
          this._zerosVec.createWeblasTensor();
        }
      }
    }

    /**
     * Method for computing output dimensions and padding, based on input
     * dimensions, kernel size, and padding mode.
     * For tensorflow implementation of padding, see:
     * https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/common_shape_fns.cc
     * @param {number[]} inputShape
     */

  }, {
    key: '_calcOutputShape',
    value: function _calcOutputShape(inputShape) {
      var inputRows = inputShape[0];
      var inputCols = inputShape[1];

      var _kernelShape = _slicedToArray(this.kernelShape, 3),
          nbFilter = _kernelShape[0],
          nbRow = _kernelShape[1],
          nbCol = _kernelShape[2];

      var outputRows = this.borderMode === 'same' ? Math.floor((inputRows + this.subsample[0] - 1) / this.subsample[0]) : Math.floor((inputRows - nbRow + this.subsample[0]) / this.subsample[0]);
      var outputCols = this.borderMode === 'same' ? Math.floor((inputCols + this.subsample[1] - 1) / this.subsample[1]) : Math.floor((inputCols - nbCol + this.subsample[1]) / this.subsample[1]);
      var outputChannels = nbFilter;

      var paddingRow = this.borderMode === 'same' ? Math.max(0, Math.floor((outputRows - 1) * this.subsample[0] + nbRow - inputRows)) : 0;
      var paddingCol = this.borderMode === 'same' ? Math.max(0, Math.floor((outputCols - 1) * this.subsample[1] + nbCol - inputCols)) : 0;
      var paddingRowBefore = Math.floor(paddingRow / 2);
      var paddingRowAfter = paddingRow - paddingRowBefore;
      var paddingColBefore = Math.floor(paddingCol / 2);
      var paddingColAfter = paddingCol - paddingColBefore;

      this.outputShape = [outputRows, outputCols, outputChannels];
      this.inputPadding = [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter];
    }

    /**
     * Pad input tensor if necessary, for borderMode='same'.
     * See above for notes on calculating padding.
     * @param {Tensor} x
     * @param {number} [padValue]
     * @returns {Tensor} x
     */

  }, {
    key: '_padInput',
    value: function _padInput(x) {
      var padValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this.borderMode === 'same') {
        var _x$tensor$shape = _slicedToArray(x.tensor.shape, 3),
            inputRows = _x$tensor$shape[0],
            inputCols = _x$tensor$shape[1],
            inputChannels = _x$tensor$shape[2];

        var _inputPadding = _slicedToArray(this.inputPadding, 4),
            paddingRowBefore = _inputPadding[0],
            paddingRowAfter = _inputPadding[1],
            paddingColBefore = _inputPadding[2],
            paddingColAfter = _inputPadding[3];

        var newRows = inputRows + paddingRowBefore + paddingRowAfter;
        var newCols = inputCols + paddingColBefore + paddingColAfter;
        var _x = new _Tensor2.default([], [newRows, newCols, inputChannels]);
        if (padValue !== 0) {
          _ndarrayOps2.default.assigns(_x.tensor, padValue);
        }
        _ndarrayOps2.default.assign(_x.tensor.hi(inputRows + paddingRowBefore, inputCols + paddingColBefore, inputChannels).lo(paddingRowBefore, paddingColBefore, 0), x.tensor);
        x.tensor = _x.tensor;
      }
      return x;
    }

    /**
     * Convert input tensor to column matrix
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_im2col',
    value: function _im2col(x) {
      var _x$tensor$shape2 = _slicedToArray(x.tensor.shape, 3),
          inputRows = _x$tensor$shape2[0],
          inputCols = _x$tensor$shape2[1],
          inputChannels = _x$tensor$shape2[2];

      var nbRow = this.kernelShape[1];
      var nbCol = this.kernelShape[2];
      var outputRows = this.outputShape[0];
      var outputCols = this.outputShape[1];
      var nbPatches = outputRows * outputCols;
      var patchLen = nbRow * nbCol * inputChannels;

      if (!this._imColsMat) {
        this._imColsMat = new _Tensor2.default([], [nbPatches, patchLen]);
      }

      if (nbRow === 1 && nbCol === 1 && this.subsample[0] === 1 && this.subsample[1] === 1) {
        this._imColsMat.replaceTensorData(x.tensor.data);
        if (this._useWeblas) {
          this._imColsMat.createWeblasTensor();
        }
        return this._imColsMat;
      }

      var patch = new _Tensor2.default([], [nbRow, nbCol, inputChannels]);
      var offset = 0;
      for (var i = 0, limit = inputRows - nbRow; i <= limit; i += this.subsample[0]) {
        for (var j = 0, _limit = inputCols - nbCol; j <= _limit; j += this.subsample[1]) {
          _ndarrayOps2.default.assign(patch.tensor, x.tensor.hi(i + nbRow, j + nbCol, inputChannels).lo(i, j, 0));
          this._imColsMat.tensor.data.set(patch.tensor.data, offset);
          offset += patchLen;
        }
      }
      if (this._useWeblas) {
        this._imColsMat.createWeblasTensor();
      }
      return this._imColsMat;
    }

    /**
     * Convert filter weights to row matrix
     * @returns {Tensor|weblas.pipeline.Tensor} wRowsMat
     */

  }, {
    key: '_w2row',
    value: function _w2row() {
      var inputChannels = this.weights.W.tensor.shape[2];

      var _kernelShape2 = _slicedToArray(this.kernelShape, 3),
          nbFilter = _kernelShape2[0],
          nbRow = _kernelShape2[1],
          nbCol = _kernelShape2[2];

      var patchLen = nbRow * nbCol * inputChannels;

      this._wRowsMat = new _Tensor2.default([], [patchLen, nbFilter]);

      var patch = new _Tensor2.default([], [nbRow, nbCol, inputChannels]);
      var patchRaveled = new _Tensor2.default([], [patchLen]);
      for (var n = 0; n < nbFilter; n++) {
        _ndarrayOps2.default.assign(patch.tensor, this.weights.W.tensor.pick(null, null, null, n));
        patchRaveled.replaceTensorData(patch.tensor.data);
        _ndarrayOps2.default.assign(this._wRowsMat.tensor.pick(null, n), patchRaveled.tensor);
      }

      return this._wRowsMat;
    }

    /**
     * Creates a index mapping from the 2D-tiled input tensor with associated
     * 3D tensor shape to the representation required prior to the matrix multiply.
     * This allows us to work directly on the 2D tiled tensor representations rather
     * than needing to reshape to the 3D reprentation and calling im2col.
     * @param {number[]} inputShape
     */

  }, {
    key: '_tiledIndexMapping',
    value: function _tiledIndexMapping(inputShape) {
      if (this._tiledIndexMappingRow && this._tiledIndexMappingCol) {
        return;
      }

      var _inputShape = _slicedToArray(inputShape, 3),
          inputRows = _inputShape[0],
          inputCols = _inputShape[1],
          inputChannels = _inputShape[2];

      var indicesRow = new _Tensor2.default([], inputShape);
      var indicesCol = new _Tensor2.default([], inputShape);
      for (var i = 0; i < inputRows; i++) {
        for (var j = 0; j < inputCols; j++) {
          _ndarrayOps2.default.assigns(indicesRow.tensor.pick(i, j, null), i * inputCols + j);
        }
      }
      for (var k = 0; k < inputChannels; k++) {
        _ndarrayOps2.default.assigns(indicesCol.tensor.pick(null, null, k), k);
      }

      // padding for border mode 'same'
      if (this.borderMode === 'same') {
        var _inputPadding2 = _slicedToArray(this.inputPadding, 4),
            paddingRowBefore = _inputPadding2[0],
            paddingRowAfter = _inputPadding2[1],
            paddingColBefore = _inputPadding2[2],
            paddingColAfter = _inputPadding2[3];

        inputRows = inputRows + paddingRowBefore + paddingRowAfter;
        inputCols = inputCols + paddingColBefore + paddingColAfter;
        var padValue = -1;
        this._padInput(indicesRow, padValue);
        this._padInput(indicesCol, padValue);
      }

      var nbRow = this.kernelShape[1];
      var nbCol = this.kernelShape[2];
      var outputRows = this.outputShape[0];
      var outputCols = this.outputShape[1];
      var nbPatches = outputRows * outputCols;
      var patchLen = nbRow * nbCol * inputChannels;

      this._tiledIndexMappingRow = new _Tensor2.default([], [nbPatches, patchLen]);
      this._tiledIndexMappingCol = new _Tensor2.default([], [nbPatches, patchLen]);

      var patchRow = new _Tensor2.default([], [nbRow, nbCol, inputChannels]);
      var patchCol = new _Tensor2.default([], [nbRow, nbCol, inputChannels]);
      var offset = 0;
      for (var _i = 0, limit = inputRows - nbRow; _i <= limit; _i += this.subsample[0]) {
        for (var _j = 0, _limit2 = inputCols - nbCol; _j <= _limit2; _j += this.subsample[1]) {
          _ndarrayOps2.default.assign(patchRow.tensor, indicesRow.tensor.hi(_i + nbRow, _j + nbCol, inputChannels).lo(_i, _j, 0));
          _ndarrayOps2.default.assign(patchCol.tensor, indicesCol.tensor.hi(_i + nbRow, _j + nbCol, inputChannels).lo(_i, _j, 0));
          this._tiledIndexMappingRow.tensor.data.set(patchRow.tensor.data, offset);
          this._tiledIndexMappingCol.tensor.data.set(patchCol.tensor.data, offset);
          offset += patchLen;
        }
      }
      this._tiledIndexMappingRow.createWeblasTensor();
      this._tiledIndexMappingCol.createWeblasTensor();
    }

    /**
     * Runs layer computational logic in pipeline mode
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_callPipelineMode',
    value: function _callPipelineMode(x) {
      if (!x.weblasTensor) {
        throw new Error('Variable passed in does not contain weblas tensor.');
      }

      this._tiledIndexMapping(this.inputShape);

      var bias = this.bias ? this.weights.b.weblasTensor : this._zerosVec.weblasTensor;
      x.weblasTensor = this.webglConv2D.call(x.weblasTensor, this._wRowsMat.weblasTensor, bias, this.activation, x._fromPipeline ? this._tiledIndexMappingRow.weblasTensor : null, x._fromPipeline ? this._tiledIndexMappingCol.weblasTensor : null);

      x._fromPipeline = true;
      x._actualShape = this.outputShape;

      return x;
    }

    /**
     * Runs layer computational logic in regular mode
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_callRegularMode',
    value: function _callRegularMode(x) {
      if (!x.tensor) {
        throw new Error('Variable passed in does not contain tensor.');
      }

      // convert to tf ordering
      if (this.dimOrdering === 'th') {
        x.tensor = x.tensor.transpose(1, 2, 0);
      }

      var nbFilter = this.kernelShape[0];
      var outputRows = this.outputShape[0];
      var outputCols = this.outputShape[1];
      var nbPatches = outputRows * outputCols;
      var matMul = new _Tensor2.default([], [nbPatches, nbFilter]);

      if (this._useWeblas && !(this._imColsMat._gpuMaxSizeExceeded || this._wRowsMat._gpuMaxSizeExceeded)) {
        // GPU
        var bias = this.bias ? this.weights.b.weblasTensor : this._zerosVec.weblasTensor;
        matMul.tensor.data = weblas.pipeline.sgemm(1, this._imColsMat.weblasTensor, this._wRowsMat.weblasTensor, 1, bias).transfer();
      } else {
        // CPU
        if (this.bias) {
          for (var n = 0; n < nbFilter; n++) {
            _ndarrayOps2.default.assigns(matMul.tensor.pick(null, n), this.weights.b.tensor.get(n));
          }
        }
        (0, _ndarrayGemm2.default)(matMul.tensor, this._imColsMat.tensor, this._wRowsMat.tensor, 1, 1);
      }

      var output = new _Tensor2.default([], this.outputShape);
      var outputChannelRaveled = new _Tensor2.default([], [outputRows * outputCols]);
      var outputChannel = new _Tensor2.default([], [outputRows, outputCols]);
      for (var _n = 0; _n < nbFilter; _n++) {
        _ndarrayOps2.default.assign(outputChannelRaveled.tensor, matMul.tensor.pick(null, _n));
        outputChannel.replaceTensorData(outputChannelRaveled.tensor.data);
        _ndarrayOps2.default.assign(output.tensor.pick(null, null, _n), outputChannel.tensor);
      }
      x.tensor = output.tensor;

      this.activationFunc(x);

      // convert back to th ordering if necessary
      if (this.dimOrdering === 'th') {
        x.tensor = x.tensor.transpose(2, 0, 1);
      }

      return x;
    }

    /**
     * Method for layer computational logic
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: 'call',
    value: function call(x) {
      if (x._fromPipeline) {
        this.inputShape = x._actualShape;
      } else {
        this.inputShape = x.tensor.shape;
      }
      this._calcOutputShape(this.inputShape);

      if (this._pipelineEnabled) {
        if (!x._fromPipeline) {
          this._padInput(x);
          this._im2col(x);
          if (!this._imColsMat._gpuMaxSizeExceeded) {
            x.weblasTensor = this._imColsMat.weblasTensor;
          } else {
            return this._callRegularMode(x);
          }
        }
        return this._callPipelineMode(x);
      } else {
        this._padInput(x);
        this._im2col(x);
        return this._callRegularMode(x);
      }
    }
  }]);

  return Convolution2D;
}(_Layer3.default);

exports.default = Convolution2D;