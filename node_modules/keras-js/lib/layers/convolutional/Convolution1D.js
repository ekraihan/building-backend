'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Layer2 = require('../../Layer');

var _Layer3 = _interopRequireDefault(_Layer2);

var _Convolution2D = require('./Convolution2D');

var _Convolution2D2 = _interopRequireDefault(_Convolution2D);

var _ndarraySqueeze = require('ndarray-squeeze');

var _ndarraySqueeze2 = _interopRequireDefault(_ndarraySqueeze);

var _ndarrayUnsqueeze = require('ndarray-unsqueeze');

var _ndarrayUnsqueeze2 = _interopRequireDefault(_ndarrayUnsqueeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Convolution1D layer class
 */
var Convolution1D = function (_Layer) {
  _inherits(Convolution1D, _Layer);

  /**
   * Creates a Convolution1D layer
   * @param {number} attrs.nbFilter - Number of convolution filters to use.
   * @param {number} attrs.filterLength - Length of 1D convolution kernel.
   * @param {Object} [attrs] - layer attributes
   */
  function Convolution1D() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Convolution1D);

    var _this = _possibleConstructorReturn(this, (Convolution1D.__proto__ || Object.getPrototypeOf(Convolution1D)).call(this, attrs));

    _this.layerClass = 'Convolution1D';

    var _attrs$nbFilter = attrs.nbFilter,
        nbFilter = _attrs$nbFilter === undefined ? 1 : _attrs$nbFilter,
        _attrs$filterLength = attrs.filterLength,
        filterLength = _attrs$filterLength === undefined ? 1 : _attrs$filterLength,
        _attrs$activation = attrs.activation,
        activation = _attrs$activation === undefined ? 'linear' : _attrs$activation,
        _attrs$borderMode = attrs.borderMode,
        borderMode = _attrs$borderMode === undefined ? 'valid' : _attrs$borderMode,
        _attrs$subsampleLengt = attrs.subsampleLength,
        subsampleLength = _attrs$subsampleLengt === undefined ? 1 : _attrs$subsampleLengt,
        _attrs$bias = attrs.bias,
        bias = _attrs$bias === undefined ? true : _attrs$bias;


    if (borderMode !== 'valid' && borderMode !== 'same') {
      throw new Error(`${_this.name} [Convolution1D layer] Invalid borderMode.`);
    }

    _this.bias = bias;

    // Layer weights specification
    _this.params = _this.bias ? ['W', 'b'] : ['W'];

    // Bootstrap Convolution2D layer:
    // Convolution1D is actually a shim on top of Convolution2D, where
    // all of the computational action is performed
    // Note that Keras uses `th` dim ordering here.
    var conv2dAttrs = {
      nbFilter,
      nbRow: filterLength,
      nbCol: 1,
      activation,
      borderMode,
      subsample: [subsampleLength, 1],
      dimOrdering: 'th',
      bias
    };
    _this._conv2dAttrs = conv2dAttrs;
    _this._conv2d = new _Convolution2D2.default(Object.assign(conv2dAttrs, { gpu: attrs.gpu }));
    return _this;
  }

  /**
   * Method for setting layer weights
   * Override `super` method since weights must be set in `this._conv2d`
   * @param {Tensor[]} weightsArr - array of weights which are instances of Tensor
   */


  _createClass(Convolution1D, [{
    key: 'setWeights',
    value: function setWeights(weightsArr) {
      var _conv2dAttrs = this._conv2dAttrs,
          nbFilter = _conv2dAttrs.nbFilter,
          nbRow = _conv2dAttrs.nbRow,
          nbCol = _conv2dAttrs.nbCol;

      var shape = weightsArr[0].tensor.shape;

      // check for legacy shape of weights
      // Keras:    (nb_filter, input_dim, filter_length, 1)
      // Keras.js: (nbFilter, inputChannels, nbRow, nbCol)
      if (!(shape[0] === nbRow && shape[1] === nbCol) || shape[3] !== nbFilter) {
        console.warn('Using legacy shape of weights');

        if (!(shape[0] === nbFilter & (shape[2] === nbRow & shape[3] === nbCol))) {
          throw new Error('Unsupported shape of weights');
        }
      } else {
        weightsArr[0].tensor = weightsArr[0].tensor.transpose(3, 2, 0, 1);
      }
      this._conv2d.setWeights(weightsArr);
    }

    /**
     * Method for layer computational logic
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: 'call',
    value: function call(x) {
      x.tensor = (0, _ndarrayUnsqueeze2.default)(x.tensor).transpose(0, 2, 1);
      var conv2dOutput = this._conv2d.call(x);
      x.tensor = (0, _ndarraySqueeze2.default)(conv2dOutput.tensor).transpose(1, 0, 2);
      return x;
    }
  }]);

  return Convolution1D;
}(_Layer3.default);

exports.default = Convolution1D;