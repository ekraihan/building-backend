'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _activations = require('../../activations');

var activations = _interopRequireWildcard(_activations);

var _Tensor = require('../../Tensor');

var _Tensor2 = _interopRequireDefault(_Tensor);

var _Layer2 = require('../../Layer');

var _Layer3 = _interopRequireDefault(_Layer2);

var _ndarrayOps = require('ndarray-ops');

var _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);

var _ndarrayGemm = require('ndarray-gemm');

var _ndarrayGemm2 = _interopRequireDefault(_ndarrayGemm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Deconvolution2D layer class
 */
var Deconvolution2D = function (_Layer) {
  _inherits(Deconvolution2D, _Layer);

  /**
   * Creates a Deconvolution2D layer
   * @param {number} attrs.nbFilter - Number of convolution filters to use.
   * @param {number} attrs.nbRow - Number of rows in the convolution kernel.
   * @param {number} attrs.nbCol - Number of columns in the convolution kernel.
   * @param {number[]} attrs.outputShape - Output shape of the transposed convolution operation.
   *   Array of integers [nbFilter, outputRows, outputCols]
   * @param {Object} [attrs] - layer attributes
   */
  function Deconvolution2D() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Deconvolution2D);

    var _this = _possibleConstructorReturn(this, (Deconvolution2D.__proto__ || Object.getPrototypeOf(Deconvolution2D)).call(this, attrs));

    _this.layerClass = 'Deconvolution2D';

    var _attrs$nbFilter = attrs.nbFilter,
        nbFilter = _attrs$nbFilter === undefined ? 1 : _attrs$nbFilter,
        _attrs$nbRow = attrs.nbRow,
        nbRow = _attrs$nbRow === undefined ? 1 : _attrs$nbRow,
        _attrs$nbCol = attrs.nbCol,
        nbCol = _attrs$nbCol === undefined ? 1 : _attrs$nbCol,
        _attrs$outputShape = attrs.outputShape,
        outputShape = _attrs$outputShape === undefined ? [] : _attrs$outputShape,
        _attrs$activation = attrs.activation,
        activation = _attrs$activation === undefined ? 'linear' : _attrs$activation,
        _attrs$borderMode = attrs.borderMode,
        borderMode = _attrs$borderMode === undefined ? 'valid' : _attrs$borderMode,
        _attrs$subsample = attrs.subsample,
        subsample = _attrs$subsample === undefined ? [1, 1] : _attrs$subsample,
        _attrs$dimOrdering = attrs.dimOrdering,
        dimOrdering = _attrs$dimOrdering === undefined ? 'tf' : _attrs$dimOrdering,
        _attrs$bias = attrs.bias,
        bias = _attrs$bias === undefined ? true : _attrs$bias;


    _this.kernelShape = [nbFilter, nbRow, nbCol];

    if (outputShape[0] == null) {
      _this.outputShape = outputShape.slice(1);
    } else {
      _this.outputShape = outputShape;
    }

    _this.activation = activation;
    _this.activationFunc = activations[activation];

    if (borderMode === 'valid' || borderMode === 'same') {
      _this.borderMode = borderMode;
    } else {
      throw new Error(`${_this.name} [Deconvolution2D layer] Invalid borderMode.`);
    }

    _this.subsample = subsample;

    if (dimOrdering === 'tf' || dimOrdering === 'th') {
      _this.dimOrdering = dimOrdering;
    } else {
      throw new Error(`${_this.name} [Deconvolution2D layer] Only tf and th dim ordering are allowed.`);
    }

    _this.bias = bias;

    // Layer weights specification
    _this.params = _this.bias ? ['W', 'b'] : ['W'];

    // Enable layer gpu +/- pipeline mode if supported
    if (_this.gpu && weblas) {
      _this._useWeblas = true;
      _this._pipelineEnabled = false;
    }
    return _this;
  }

  /**
   * Method for setting layer weights. Extends `super` method.
   * W weight tensor is converted to `tf` mode if in `th` mode.
   * In `tf` mode, W weight tensor has shape [nbRow, nbCol, inputChannels, nbFilter]
   * In `th` mode, W weight tensor has shape [nbFilter, inputChannels, nbRow, nbCol]
   * @param {Tensor[]} weightsArr - array of weights which are instances of Tensor
   */


  _createClass(Deconvolution2D, [{
    key: 'setWeights',
    value: function setWeights(weightsArr) {
      if (this.dimOrdering === 'th') {
        // W
        weightsArr[0].tensor = weightsArr[0].tensor.transpose(2, 3, 1, 0);
      }
      _get(Deconvolution2D.prototype.__proto__ || Object.getPrototypeOf(Deconvolution2D.prototype), 'setWeights', this).call(this, weightsArr);

      this._wRowsMat = this._w2row();
      if (this._useWeblas) {
        this._wRowsMat.createWeblasTensor();
        if (!this._wRowsMat._gpuMaxSizeExceeded) {
          this._wRowsMat.weblasTensor = this._wRowsMat.weblasTensor.transpose();
        }
      }
    }

    /**
     * Method for computing output dimensions and padding, based on input
     * dimensions, kernel size, and padding mode.
     * For tensorflow implementation of padding, see:
     * https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/common_shape_fns.cc
     * For deconvolution, we will "take away" padding from the output rather than add padding
     * to the input.
     * For more details on calculating output shapes and padding for transposed convolutions
     * (deconvolution here), see: https://arxiv.org/pdf/1603.07285v1.pdf
     * @param {Tensor} x
     */

  }, {
    key: '_calcOutputPadding',
    value: function _calcOutputPadding(x) {
      var inputRows = x.tensor.shape[0];
      var inputCols = x.tensor.shape[1];
      var nbRow = this.kernelShape[1];
      var nbCol = this.kernelShape[2];

      // In contrast to Convolution2D, where we calculate the output shape,
      // the output shape is taken from the construtor variable, since
      // there is some level of ambiguity: input of shape [4, 4, inputChannels]
      // can have an output shape of either [7, 7, nbFilter] or [8, 8, nbFilter]
      // with borderMode `same` and subsample (stride) [2, 2].
      var outputRows = this.outputShape[0];
      var outputCols = this.outputShape[1];

      var paddingRow = this.borderMode === 'same' ? Math.max(0, Math.floor((inputRows - 1) * this.subsample[0] + nbRow - outputRows)) : 0;
      var paddingCol = this.borderMode === 'same' ? Math.max(0, Math.floor((inputCols - 1) * this.subsample[1] + nbCol - outputCols)) : 0;
      var paddingRowBefore = Math.floor(paddingRow / 2);
      var paddingRowAfter = paddingRow - paddingRowBefore;
      var paddingColBefore = Math.floor(paddingCol / 2);
      var paddingColAfter = paddingCol - paddingColBefore;

      this.outputPadding = [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter];
    }

    /**
     * Convert input image to column matrix, along channels axis
     * shape: [inputRows, inputCols, inputChannels] -> [inputRows * inputCols, inputChannels]
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_im2col',
    value: function _im2col(x) {
      var _x$tensor$shape = _slicedToArray(x.tensor.shape, 3),
          inputRows = _x$tensor$shape[0],
          inputCols = _x$tensor$shape[1],
          inputChannels = _x$tensor$shape[2];

      var imColsMat = new _Tensor2.default([], [inputRows * inputCols, inputChannels]);
      var channelRaveled = new _Tensor2.default([], [inputRows * inputCols]);
      var channel = new _Tensor2.default([], [inputRows, inputCols]);
      for (var c = 0; c < inputChannels; c++) {
        _ndarrayOps2.default.assign(channel.tensor, x.tensor.pick(null, null, c));
        channelRaveled.replaceTensorData(channel.tensor.data);
        _ndarrayOps2.default.assign(imColsMat.tensor.pick(null, c), channelRaveled.tensor);
      }
      return imColsMat;
    }

    /**
     * Convert filter weights to row matrix, along channels axis
     * shape: [nbRow, nbCol, inputChannels, nbFilter] -> [inputChannels, nbRow * nbCol * nbFilter]
     * @returns {Tensor|weblas.pipeline.Tensor} wRowsMat
     */

  }, {
    key: '_w2row',
    value: function _w2row() {
      var _weights$W$tensor$sha = _slicedToArray(this.weights.W.tensor.shape, 4),
          nbRow = _weights$W$tensor$sha[0],
          nbCol = _weights$W$tensor$sha[1],
          inputChannels = _weights$W$tensor$sha[2],
          nbFilter = _weights$W$tensor$sha[3];

      var wRowsMat = new _Tensor2.default([], [inputChannels, nbRow * nbCol * nbFilter]);

      var channelRaveled = new _Tensor2.default([], [nbRow * nbCol * nbFilter]);
      var channel = new _Tensor2.default([], [nbRow, nbCol, nbFilter]);
      for (var c = 0; c < inputChannels; c++) {
        _ndarrayOps2.default.assign(channel.tensor, this.weights.W.tensor.pick(null, null, c, null));
        channelRaveled.replaceTensorData(channel.tensor.data);
        _ndarrayOps2.default.assign(wRowsMat.tensor.pick(c, null), channelRaveled.tensor);
      }

      return wRowsMat;
    }

    /**
     * Method for layer computational logic
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: 'call',
    value: function call(x) {
      // convert to tf ordering
      if (this.dimOrdering === 'th') {
        x.tensor = x.tensor.transpose(1, 2, 0);
      }

      var imColsMat = this._im2col(x);
      if (this._useWeblas) {
        imColsMat.createWeblasTensor();
      }

      var inputRows = x.tensor.shape[0];
      var inputCols = x.tensor.shape[1];

      var _kernelShape = _slicedToArray(this.kernelShape, 3),
          nbFilter = _kernelShape[0],
          nbRow = _kernelShape[1],
          nbCol = _kernelShape[2];

      var matMul = new _Tensor2.default([], [inputRows * inputCols, nbRow * nbCol * nbFilter]);

      if (this._useWeblas && !(imColsMat._gpuMaxSizeExceeded || this._wRowsMat._gpuMaxSizeExceeded)) {
        var _zerosVec = new _Tensor2.default([], [this.weights.W.tensor.shape[3]]);
        _zerosVec.createWeblasTensor();
        matMul.tensor.data = weblas.pipeline.sgemm(1, imColsMat.weblasTensor, this._wRowsMat.weblasTensor, 0, _zerosVec).transfer();
        imColsMat.weblasTensor.delete();
        delete imColsMat.weblasTensor;
      } else {
        (0, _ndarrayGemm2.default)(matMul.tensor, imColsMat.tensor, this._wRowsMat.tensor, 1, 1);
      }

      this._calcOutputPadding(x);

      // add padding which we will take away later

      var _outputPadding = _slicedToArray(this.outputPadding, 4),
          paddingRowBefore = _outputPadding[0],
          paddingRowAfter = _outputPadding[1],
          paddingColBefore = _outputPadding[2],
          paddingColAfter = _outputPadding[3];

      var output = new _Tensor2.default([], this.outputShape);
      var outputPadded = new _Tensor2.default([], [this.outputShape[0] + paddingRowBefore + paddingRowAfter, this.outputShape[1] + paddingColBefore + paddingColAfter, this.outputShape[2]]);

      // bias
      if (this.bias) {
        for (var n = 0; n < nbFilter; n++) {
          _ndarrayOps2.default.assigns(outputPadded.tensor.pick(null, null, n), this.weights.b.tensor.get(n));
        }
      }

      var patchShape = [nbRow, nbCol, nbFilter];
      var patch = new _Tensor2.default([], patchShape);
      var patchRaveled = new _Tensor2.default([], [nbRow * nbCol * nbFilter]);
      var index = 0;
      for (var i = 0; i < inputRows; i++) {
        for (var j = 0; j < inputCols; j++) {
          _ndarrayOps2.default.assign(patchRaveled.tensor, matMul.tensor.pick(index, null));
          patch.replaceTensorData(patchRaveled.tensor.data);
          var iOutPos = i * this.subsample[0];
          var jOutPos = j * this.subsample[1];
          _ndarrayOps2.default.addeq(outputPadded.tensor.hi(iOutPos + nbRow, jOutPos + nbCol, this.outputShape[2]).lo(iOutPos, jOutPos, 0), patch.tensor);
          index += 1;
        }
      }

      // remove padding
      _ndarrayOps2.default.assign(output.tensor, outputPadded.tensor.hi(this.outputShape[0] + paddingRowBefore, this.outputShape[1] + paddingColBefore, this.outputShape[2]).lo(paddingRowBefore, paddingColBefore, 0));

      x.tensor = output.tensor;
      this.activationFunc(x);

      // convert back to th ordering if necessary
      if (this.dimOrdering === 'th') {
        x.tensor = x.tensor.transpose(2, 0, 1);
      }

      return x;
    }
  }]);

  return Deconvolution2D;
}(_Layer3.default);

exports.default = Deconvolution2D;