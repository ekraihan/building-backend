'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _activations = require('../../activations');

var activations = _interopRequireWildcard(_activations);

var _Tensor = require('../../Tensor');

var _Tensor2 = _interopRequireDefault(_Tensor);

var _Layer2 = require('../../Layer');

var _Layer3 = _interopRequireDefault(_Layer2);

var _ndarrayOps = require('ndarray-ops');

var _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);

var _ndarrayGemm = require('ndarray-gemm');

var _ndarrayGemm2 = _interopRequireDefault(_ndarrayGemm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Convolution3D layer class
 */
var Convolution3D = function (_Layer) {
  _inherits(Convolution3D, _Layer);

  /**
   * Creates a Convolution3D layer
   * @param {number} attrs.nbFilter - Number of convolution filters to use.
   * @param {number} attrs.kernelDim1 - Length of the first dimension in the convolution kernel.
   * @param {number} attrs.kernelDim2 - Length of the second dimension in the convolution kernel.
   * @param {number} attrs.kernelDim3 - Length of the third dimension in the convolution kernel.
   * @param {Object} [attrs] - layer attributes
   */
  function Convolution3D() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Convolution3D);

    var _this = _possibleConstructorReturn(this, (Convolution3D.__proto__ || Object.getPrototypeOf(Convolution3D)).call(this, attrs));

    _this.layerClass = 'Convolution3D';

    var _attrs$nbFilter = attrs.nbFilter,
        nbFilter = _attrs$nbFilter === undefined ? 1 : _attrs$nbFilter,
        _attrs$kernelDim = attrs.kernelDim1,
        kernelDim1 = _attrs$kernelDim === undefined ? 1 : _attrs$kernelDim,
        _attrs$kernelDim2 = attrs.kernelDim2,
        kernelDim2 = _attrs$kernelDim2 === undefined ? 1 : _attrs$kernelDim2,
        _attrs$kernelDim3 = attrs.kernelDim3,
        kernelDim3 = _attrs$kernelDim3 === undefined ? 1 : _attrs$kernelDim3,
        _attrs$activation = attrs.activation,
        activation = _attrs$activation === undefined ? 'linear' : _attrs$activation,
        _attrs$borderMode = attrs.borderMode,
        borderMode = _attrs$borderMode === undefined ? 'valid' : _attrs$borderMode,
        _attrs$subsample = attrs.subsample,
        subsample = _attrs$subsample === undefined ? [1, 1, 1] : _attrs$subsample,
        _attrs$dimOrdering = attrs.dimOrdering,
        dimOrdering = _attrs$dimOrdering === undefined ? 'tf' : _attrs$dimOrdering,
        _attrs$bias = attrs.bias,
        bias = _attrs$bias === undefined ? true : _attrs$bias;


    _this.kernelShape = [nbFilter, kernelDim1, kernelDim2, kernelDim3];

    _this.activation = activation;
    _this.activationFunc = activations[activation];

    if (borderMode === 'valid' || borderMode === 'same') {
      _this.borderMode = borderMode;
    } else {
      throw new Error(`${_this.name} [Convolution3D layer] Invalid borderMode.`);
    }

    _this.subsample = subsample;

    if (dimOrdering === 'tf' || dimOrdering === 'th') {
      _this.dimOrdering = dimOrdering;
    } else {
      throw new Error(`${_this.name} [Convolution3D layer] Only tf and th dim ordering are allowed.`);
    }

    _this.bias = bias;

    // Layer weights specification
    _this.params = _this.bias ? ['W', 'b'] : ['W'];

    // Enable layer gpu +/- pipeline mode if supported
    if (_this.gpu && weblas) {
      _this._useWeblas = true;
      _this._pipelineEnabled = false;
    }
    return _this;
  }

  /**
   * Method for setting layer weights. Extends `super` method.
   * W weight tensor is converted to `tf` mode if in `th` mode.
   * In `tf` mode, W weight tensor has shape [kernelDim1, kernelDim2, kernelDim3, inputChannels, nbFilter]
   * In `th` mode, W weight tensor has shape [nbFilter, inputChannels, kernelDim1, kernelDim2, kernelDim3]
   * @param {Tensor[]} weightsArr - array of weights which are instances of Tensor
   */


  _createClass(Convolution3D, [{
    key: 'setWeights',
    value: function setWeights(weightsArr) {
      if (this.dimOrdering === 'th') {
        // W
        weightsArr[0].tensor = weightsArr[0].tensor.transpose(2, 3, 4, 1, 0);
      }
      _get(Convolution3D.prototype.__proto__ || Object.getPrototypeOf(Convolution3D.prototype), 'setWeights', this).call(this, weightsArr);

      this._wRowsMat = this._w2row();
      if (this._useWeblas) {
        this._wRowsMat.createWeblasTensor();
        if (!this._wRowsMat._gpuMaxSizeExceeded) {
          this._wRowsMat.weblasTensor = this._wRowsMat.weblasTensor.transpose();
        }
        if (this.bias) {
          this.weights.b.createWeblasTensor();
        } else {
          this._zerosVec = new _Tensor2.default([], [this.weights.W.tensor.shape[4]]);
          this._zerosVec.createWeblasTensor();
        }
      }
    }

    /**
     * Method for computing output dimensions and padding, based on input
     * dimensions, kernel size, and padding mode.
     * For tensorflow implementation of padding, see:
     * https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/common_shape_fns.cc
     * @param {Tensor} x
     */

  }, {
    key: '_calcOutputShape',
    value: function _calcOutputShape(x) {
      var inputDim1 = x.tensor.shape[0];
      var inputDim2 = x.tensor.shape[1];
      var inputDim3 = x.tensor.shape[2];

      var _kernelShape = _slicedToArray(this.kernelShape, 4),
          nbFilter = _kernelShape[0],
          kernelDim1 = _kernelShape[1],
          kernelDim2 = _kernelShape[2],
          kernelDim3 = _kernelShape[3];

      var outputDim1 = this.borderMode === 'same' ? Math.floor((inputDim1 + this.subsample[0] - 1) / this.subsample[0]) : Math.floor((inputDim1 - kernelDim1 + this.subsample[0]) / this.subsample[0]);
      var outputDim2 = this.borderMode === 'same' ? Math.floor((inputDim2 + this.subsample[1] - 1) / this.subsample[1]) : Math.floor((inputDim2 - kernelDim2 + this.subsample[1]) / this.subsample[1]);
      var outputDim3 = this.borderMode === 'same' ? Math.floor((inputDim3 + this.subsample[2] - 1) / this.subsample[2]) : Math.floor((inputDim3 - kernelDim3 + this.subsample[2]) / this.subsample[2]);
      var outputChannels = nbFilter;

      var paddingDim1 = this.borderMode === 'same' ? Math.max(0, Math.floor((outputDim1 - 1) * this.subsample[0] + kernelDim1 - inputDim1)) : 0;
      var paddingDim2 = this.borderMode === 'same' ? Math.max(0, Math.floor((outputDim2 - 1) * this.subsample[1] + kernelDim2 - inputDim2)) : 0;
      var paddingDim3 = this.borderMode === 'same' ? Math.max(0, Math.floor((outputDim3 - 1) * this.subsample[2] + kernelDim3 - inputDim3)) : 0;
      var paddingDim1Before = Math.floor(paddingDim1 / 2);
      var paddingDim1After = paddingDim1 - paddingDim1Before;
      var paddingDim2Before = Math.floor(paddingDim2 / 2);
      var paddingDim2After = paddingDim2 - paddingDim2Before;
      var paddingDim3Before = Math.floor(paddingDim3 / 2);
      var paddingDim3After = paddingDim3 - paddingDim3Before;

      this.outputShape = [outputDim1, outputDim2, outputDim3, outputChannels];
      this.inputPadding = [paddingDim1Before, paddingDim1After, paddingDim2Before, paddingDim2After, paddingDim3Before, paddingDim3After];
    }

    /**
     * Pad input tensor if necessary, for borderMode='same'
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_padInput',
    value: function _padInput(x) {
      if (this.borderMode === 'same') {
        var _x$tensor$shape = _slicedToArray(x.tensor.shape, 4),
            inputDim1 = _x$tensor$shape[0],
            inputDim2 = _x$tensor$shape[1],
            inputDim3 = _x$tensor$shape[2],
            inputChannels = _x$tensor$shape[3];

        var _inputPadding = _slicedToArray(this.inputPadding, 6),
            paddingDim1Before = _inputPadding[0],
            paddingDim1After = _inputPadding[1],
            paddingDim2Before = _inputPadding[2],
            paddingDim2After = _inputPadding[3],
            paddingDim3Before = _inputPadding[4],
            paddingDim3After = _inputPadding[5];

        var newDim1 = inputDim1 + paddingDim1Before + paddingDim1After;
        var newDim2 = inputDim2 + paddingDim2Before + paddingDim2After;
        var newDim3 = inputDim3 + paddingDim3Before + paddingDim3After;
        var _x = new _Tensor2.default([], [newDim1, newDim2, newDim3, inputChannels]);
        _ndarrayOps2.default.assign(_x.tensor.hi(inputDim1 + paddingDim1Before, inputDim2 + paddingDim2Before, inputDim3 + paddingDim3Before, inputChannels).lo(paddingDim1Before, paddingDim2Before, paddingDim3Before, 0), x.tensor);
        x.tensor = _x.tensor;
      }
      return x;
    }

    /**
     * Convert input volume to column matrix
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_vol2col',
    value: function _vol2col(x) {
      var _x$tensor$shape2 = _slicedToArray(x.tensor.shape, 4),
          inputDim1 = _x$tensor$shape2[0],
          inputDim2 = _x$tensor$shape2[1],
          inputDim3 = _x$tensor$shape2[2],
          inputChannels = _x$tensor$shape2[3];

      var kernelDim1 = this.kernelShape[1];
      var kernelDim2 = this.kernelShape[2];
      var kernelDim3 = this.kernelShape[3];
      var outputDim1 = this.outputShape[0];
      var outputDim2 = this.outputShape[1];
      var outputDim3 = this.outputShape[2];
      var nbPatches = outputDim1 * outputDim2 * outputDim3;
      var patchLen = kernelDim1 * kernelDim2 * kernelDim3 * inputChannels;

      if (!this._volColsMat) {
        this._volColsMat = new _Tensor2.default([], [nbPatches, patchLen]);
      }

      if (kernelDim1 === 1 && kernelDim2 === 1 && kernelDim3 === 1 && this.subsample[0] === 1 && this.subsample[1] === 1 && this.subsample[2] === 1) {
        this._volColsMat.replaceTensorData(x.tensor.data);
        if (this._useWeblas) {
          this._volColsMat.createWeblasTensor();
        }
        return this._volColsMat;
      }

      var patch = new _Tensor2.default([], [kernelDim1, kernelDim2, kernelDim3, inputChannels]);
      var offset = 0;
      for (var i = 0, limit = inputDim1 - kernelDim1; i <= limit; i += this.subsample[0]) {
        for (var j = 0, _limit = inputDim2 - kernelDim2; j <= _limit; j += this.subsample[1]) {
          for (var k = 0, _limit2 = inputDim3 - kernelDim3; k <= _limit2; k += this.subsample[2]) {
            _ndarrayOps2.default.assign(patch.tensor, x.tensor.hi(i + kernelDim1, j + kernelDim2, k + kernelDim3, inputChannels).lo(i, j, k, 0));
            this._volColsMat.tensor.data.set(patch.tensor.data, offset);
            offset += patchLen;
          }
        }
      }
      if (this._useWeblas) {
        this._volColsMat.createWeblasTensor();
      }
      return this._volColsMat;
    }

    /**
     * Convert filter weights to row matrix
     * @returns {Tensor|weblas.pipeline.Tensor} wRowsMat
     */

  }, {
    key: '_w2row',
    value: function _w2row() {
      var inputChannels = this.weights.W.tensor.shape[3];

      var _kernelShape2 = _slicedToArray(this.kernelShape, 4),
          nbFilter = _kernelShape2[0],
          kernelDim1 = _kernelShape2[1],
          kernelDim2 = _kernelShape2[2],
          kernelDim3 = _kernelShape2[3];

      var patchLen = kernelDim1 * kernelDim2 * kernelDim3 * inputChannels;

      var wRowsMat = new _Tensor2.default([], [patchLen, nbFilter]);

      var patch = new _Tensor2.default([], [kernelDim1, kernelDim2, kernelDim3, inputChannels]);
      var patchRaveled = new _Tensor2.default([], [patchLen]);
      for (var n = 0; n < nbFilter; n++) {
        _ndarrayOps2.default.assign(patch.tensor, this.weights.W.tensor.pick(null, null, null, null, n));
        patchRaveled.replaceTensorData(patch.tensor.data);
        _ndarrayOps2.default.assign(wRowsMat.tensor.pick(null, n), patchRaveled.tensor);
      }

      return wRowsMat;
    }

    /**
     * Method for layer computational logic
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: 'call',
    value: function call(x) {
      // convert to tf ordering
      if (this.dimOrdering === 'th') {
        x.tensor = x.tensor.transpose(1, 2, 3, 0);
      }

      this._calcOutputShape(x);
      this._padInput(x);

      this._vol2col(x);

      var nbFilter = this.kernelShape[0];
      var outputDim1 = this.outputShape[0];
      var outputDim2 = this.outputShape[1];
      var outputDim3 = this.outputShape[2];
      var nbPatches = outputDim1 * outputDim2 * outputDim3;
      var matMul = new _Tensor2.default([], [nbPatches, nbFilter]);

      if (this._useWeblas && !(this._volColsMat._gpuMaxSizeExceeded || this._wRowsMat._gpuMaxSizeExceeded)) {
        var bias = this.bias ? this.weights.b.weblasTensor : this._zerosVec.weblasTensor;
        matMul.tensor.data = weblas.pipeline.sgemm(1, this._volColsMat.weblasTensor, this._wRowsMat.weblasTensor, 1, bias).transfer();
      } else {
        if (this.bias) {
          for (var n = 0; n < nbFilter; n++) {
            _ndarrayOps2.default.assigns(matMul.tensor.pick(null, n), this.weights.b.tensor.get(n));
          }
        }
        (0, _ndarrayGemm2.default)(matMul.tensor, this._volColsMat.tensor, this._wRowsMat.tensor, 1, 1);
      }

      var output = new _Tensor2.default([], this.outputShape);
      var outputChannelRaveled = new _Tensor2.default([], [outputDim1 * outputDim2 * outputDim3]);
      var outputChannel = new _Tensor2.default([], [outputDim1, outputDim2, outputDim3]);
      for (var _n = 0; _n < nbFilter; _n++) {
        _ndarrayOps2.default.assign(outputChannelRaveled.tensor, matMul.tensor.pick(null, _n));
        outputChannel.replaceTensorData(outputChannelRaveled.tensor.data);
        _ndarrayOps2.default.assign(output.tensor.pick(null, null, null, _n), outputChannel.tensor);
      }
      x.tensor = output.tensor;

      this.activationFunc(x);

      // convert back to th ordering if necessary
      if (this.dimOrdering === 'th') {
        x.tensor = x.tensor.transpose(3, 0, 1, 2);
      }

      return x;
    }
  }]);

  return Convolution3D;
}(_Layer3.default);

exports.default = Convolution3D;