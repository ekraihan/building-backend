'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Tensor = require('../../Tensor');

var _Tensor2 = _interopRequireDefault(_Tensor);

var _Convolution2D2 = require('./Convolution2D');

var _Convolution2D3 = _interopRequireDefault(_Convolution2D2);

var _ndarrayOps = require('ndarray-ops');

var _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * AtrousConvolution2D layer class
 * This class extends the Convolution2D layer class, and overrides the methods
 * `_calcOutputShape` and `_im2col` by creating filter dilations based on the
 * specified `atrousRate`.
 */
var AtrousConvolution2D = function (_Convolution2D) {
  _inherits(AtrousConvolution2D, _Convolution2D);

  /**
   * Creates a AtrousConvolution2D layer
   * @param {number} attrs.nbFilter - Number of convolution filters to use.
   * @param {number} attrs.nbRow - Number of rows in the convolution kernel.
   * @param {number} attrs.nbCol - Number of columns in the convolution kernel.
   * @param {Object} [attrs] - layer attributes
   */
  function AtrousConvolution2D() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AtrousConvolution2D);

    var _this = _possibleConstructorReturn(this, (AtrousConvolution2D.__proto__ || Object.getPrototypeOf(AtrousConvolution2D)).call(this, attrs));

    _this.layerClass = 'AtrousConvolution2D';

    var _attrs$atrousRate = attrs.atrousRate,
        atrousRate = _attrs$atrousRate === undefined ? [1, 1] : _attrs$atrousRate;

    _this.atrousRate = atrousRate;
    return _this;
  }

  /**
   * Method for computing output dimensions and padding, based on input
   * dimensions, kernel size, and padding mode.
   * For tensorflow implementation of padding, see:
   * https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/common_shape_fns.cc
   * @param {number[]} inputShape
   */


  _createClass(AtrousConvolution2D, [{
    key: '_calcOutputShape',
    value: function _calcOutputShape(inputShape) {
      var inputRows = inputShape[0];
      var inputCols = inputShape[1];

      var _kernelShape = _slicedToArray(this.kernelShape, 3),
          nbFilter = _kernelShape[0],
          nbRow = _kernelShape[1],
          nbCol = _kernelShape[2];

      // effective shape after filter dilation


      var nbRowDilated = nbRow + (nbRow - 1) * (this.atrousRate[0] - 1);
      var nbColDilated = nbCol + (nbCol - 1) * (this.atrousRate[1] - 1);

      var outputRows = this.borderMode === 'same' ? Math.floor((inputRows + this.subsample[0] - 1) / this.subsample[0]) : Math.floor((inputRows - nbRowDilated + this.subsample[0]) / this.subsample[0]);
      var outputCols = this.borderMode === 'same' ? Math.floor((inputCols + this.subsample[1] - 1) / this.subsample[1]) : Math.floor((inputCols - nbColDilated + this.subsample[1]) / this.subsample[1]);
      var outputChannels = nbFilter;

      var paddingRow = this.borderMode === 'same' ? Math.max(0, Math.floor((outputRows - 1) * this.subsample[0] + nbRowDilated - inputRows)) : 0;
      var paddingCol = this.borderMode === 'same' ? Math.max(0, Math.floor((outputCols - 1) * this.subsample[1] + nbColDilated - inputCols)) : 0;
      var paddingRowBefore = Math.floor(paddingRow / 2);
      var paddingRowAfter = paddingRow - paddingRowBefore;
      var paddingColBefore = Math.floor(paddingCol / 2);
      var paddingColAfter = paddingCol - paddingColBefore;

      this.outputShape = [outputRows, outputCols, outputChannels];
      this.inputPadding = [paddingRowBefore, paddingRowAfter, paddingColBefore, paddingColAfter];
    }

    /**
     * Convert input image to column matrix
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_im2col',
    value: function _im2col(x) {
      var _x$tensor$shape = _slicedToArray(x.tensor.shape, 3),
          inputRows = _x$tensor$shape[0],
          inputCols = _x$tensor$shape[1],
          inputChannels = _x$tensor$shape[2];

      var nbRow = this.kernelShape[1];
      var nbCol = this.kernelShape[2];
      var outputRows = this.outputShape[0];
      var outputCols = this.outputShape[1];
      var nbPatches = outputRows * outputCols;
      var patchLen = nbRow * nbCol * inputChannels;

      // effective shape after filter dilation
      var nbRowDilated = nbRow + (nbRow - 1) * (this.atrousRate[0] - 1);
      var nbColDilated = nbCol + (nbCol - 1) * (this.atrousRate[1] - 1);

      if (!this._imColsMat) {
        this._imColsMat = new _Tensor2.default([], [nbPatches, patchLen]);
      }

      var patch = new _Tensor2.default([], [nbRow, nbCol, inputChannels]);
      var offset = 0;
      for (var i = 0, limit = inputRows - nbRowDilated; i <= limit; i += this.subsample[0]) {
        for (var j = 0, _limit = inputCols - nbColDilated; j <= _limit; j += this.subsample[1]) {
          _ndarrayOps2.default.assign(patch.tensor, x.tensor.hi(i + nbRowDilated, j + nbColDilated, inputChannels).lo(i, j, 0).step(this.atrousRate[0], this.atrousRate[1], 1));
          this._imColsMat.tensor.data.set(patch.tensor.data, offset);
          offset += patchLen;
        }
      }
      if (this._useWeblas) {
        this._imColsMat.createWeblasTensor();
      }
      return this._imColsMat;
    }
  }]);

  return AtrousConvolution2D;
}(_Convolution2D3.default);

exports.default = AtrousConvolution2D;