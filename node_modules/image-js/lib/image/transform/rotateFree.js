'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = rotateFree;

var _Image = require('../Image');

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotateFree(degrees, options = {}) {
    var _options$interpolatio = options.interpolation,
        interpolation = _options$interpolatio === undefined ? 'none' : _options$interpolatio,
        _options$width = options.width,
        width = _options$width === undefined ? this.width : _options$width,
        _options$height = options.height,
        height = _options$height === undefined ? this.height : _options$height;


    var radians = degrees * Math.PI / 180;
    var newWidth = Math.floor(Math.abs(width * Math.cos(radians)) + Math.abs(height * Math.sin(radians)));
    var newHeight = Math.floor(Math.abs(height * Math.cos(radians)) + Math.abs(width * Math.sin(radians)));
    var newImageRotated = _Image2.default.createFrom(this, { width: newWidth, height: newHeight });
    var cos = Math.cos(-radians);
    var sin = Math.sin(-radians);

    var x0 = newWidth / 2;
    var y0 = newHeight / 2;
    if (newWidth % 2 === 0) {
        x0 = x0 - 0.5;
        if (newHeight % 2 === 0) {
            y0 = y0 - 0.5;
        } else {
            y0 = Math.floor(y0);
        }
    } else {
        x0 = Math.floor(x0);
        if (newHeight % 2 === 0) {
            y0 = y0 - 0.5;
        } else {
            y0 = Math.floor(y0);
        }
    }

    var incrementX = Math.floor(width / 2 - x0);
    var incrementY = Math.floor(height / 2 - y0);

    if (interpolation === 'bilinear') {
        var stride = this.width * this.channels;
        for (var i = 0; i < newWidth; i += 1) {
            for (var j = 0; j < newHeight; j += 1) {
                var x = (i - x0) * cos - (j - y0) * sin + x0 + incrementX;
                var y = (j - y0) * cos + (i - x0) * sin + y0 + incrementY;
                var x1 = x | 0;
                var y1 = y | 0;
                var xDiff = x - x1;
                var yDiff = y - y1;
                for (var c = 0; c < this.channels; c++) {
                    if (x < 0 || x >= width || y < 0 || y >= height) {
                        if (this.alpha) {
                            newImageRotated.setValueXY(i, j, c, this.alpha);
                        } else {
                            newImageRotated.setValueXY(i, j, c, this.maxValue);
                        }
                    } else {
                        var index = (y1 * this.width + x1) * this.channels + c;

                        var A = this.data[index];
                        var B = this.data[index + this.channels];
                        var C = this.data[index + stride];
                        var D = this.data[index + stride + this.channels];

                        var result = A + xDiff * (B - A) + yDiff * (C - A) + xDiff * yDiff * (A - B - C + D) | 0;

                        newImageRotated.setValueXY(i, j, c, result);
                    }
                }
            }
        }
    } else {
        for (var _i = 0; _i < newWidth; _i += 1) {
            for (var _j = 0; _j < newHeight; _j += 1) {
                for (var _c = 0; _c < this.channels; _c++) {
                    var _x = Math.round((_i - x0) * cos - (_j - y0) * sin + x0) + incrementX;
                    var _y = Math.round((_j - y0) * cos + (_i - x0) * sin + y0) + incrementY;

                    if (_x < 0 || _x >= width || _y < 0 || _y >= height) {
                        if (this.alpha) {
                            newImageRotated.setValueXY(_i, _j, _c, this.alpha);
                        } else {
                            newImageRotated.setValueXY(_i, _j, _c, this.maxValue);
                        }
                    } else {
                        newImageRotated.setValueXY(_i, _j, _c, this.getValueXY(_x, _y, _c));
                    }
                }
            }
        }
    }

    return newImageRotated;
} //http://homepages.inf.ed.ac.uk/rbf/HIPR2/rotate.htm
//http://www.cyut.edu.tw/~yltang/program/Rotate1.java