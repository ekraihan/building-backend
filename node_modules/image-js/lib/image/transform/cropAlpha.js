'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = cropAlpha;
/**
 * Crops the image based on the alpha channel
 * This removes lines and columns where the alpha channel is lower than a threshold value.
 * @memberof Image
 * @instance
 * @param {object} [options]
 * @param {number} [options.threshold=this.maxValue]
 * @return {Image}
 */
function cropAlpha(options = {}) {
    this.checkProcessable('cropAlpha', {
        alpha: 1
    });

    var _options$threshold = options.threshold,
        threshold = _options$threshold === undefined ? this.maxValue : _options$threshold;


    var left = findLeft(this, threshold, this.components);

    if (left === -1) {
        throw new Error('Could not find new dimensions. Threshold may be too high.');
    }

    var top = findTop(this, threshold, this.components, left);
    var bottom = findBottom(this, threshold, this.components, left);
    var right = findRight(this, threshold, this.components, left, top, bottom);

    return this.crop({
        x: left,
        y: top,
        width: right - left + 1,
        height: bottom - top + 1
    });
}

function findLeft(image, threshold, channel) {
    for (var x = 0; x < image.width; x++) {
        for (var y = 0; y < image.height; y++) {
            if (image.getValueXY(x, y, channel) >= threshold) {
                return x;
            }
        }
    }
    return -1;
}

function findTop(image, threshold, channel, left) {
    for (var y = 0; y < image.height; y++) {
        for (var x = left; x < image.width; x++) {
            if (image.getValueXY(x, y, channel) >= threshold) {
                return y;
            }
        }
    }
    return -1;
}

function findBottom(image, threshold, channel, left) {
    for (var y = image.height - 1; y >= 0; y--) {
        for (var x = left; x < image.width; x++) {
            if (image.getValueXY(x, y, channel) >= threshold) {
                return y;
            }
        }
    }
    return -1;
}

function findRight(image, threshold, channel, left, top, bottom) {
    for (var x = image.width - 1; x >= left; x--) {
        for (var y = top; y <= bottom; y++) {
            if (image.getValueXY(x, y, channel) >= threshold) {
                return x;
            }
        }
    }
    return -1;
}