"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = li;
/*
 * see http://rsb.info.nih.gov/ij/developer/source/ij/process/AutoThresholder.java.html
 * The method is present in: Implements Li's Minimum Cross Entropy thresholding method
 * This implementation is based on the iterative version (Ref. 2nd reference below) of the algorithm.
 *  1) Li, CH & Lee, CK (1993), "Minimum Cross 	Entropy Thresholding", Pattern Recognition 26(4): 61 625
 *  2) Li, CH & Tam, PKS (1998), "An Iterative 	Algorithm for Minimum Cross Entropy Thresholding",
 *     Pattern 	Recognition Letters 18(8): 771-776
 *  3) Sezgin, M & Sankur, B (2004), "Survey 	over Image Thresholding Techniques and Quantitative Performance
 *     Evaluation",Journal of Electronic Imaging 13(1): 146-165
 * @param histogram - the histogram of the image
 *        total - the number of pixels in the image
 * @returns {number} - the threshold
 */

function li(histogram, total) {

    var threshold = void 0;
    var sumBack = void 0; /* sum of the background pixels at a given threshold */
    var sumObj = void 0; /* sum of the object pixels at a given threshold */
    var numBack = void 0; /* number of background pixels at a given threshold */
    var numObj = void 0; /* number of object pixels at a given threshold */
    var oldThresh = void 0;
    var newThresh = void 0;
    var meanBack = void 0; /* mean of the background pixels at a given threshold */
    var meanObj = void 0; /* mean of the object pixels at a given threshold */
    var mean = void 0; /* mean gray-level in the image */
    var tolerance = void 0; /* threshold tolerance */
    var temp = void 0;
    tolerance = 0.5;

    /* Calculate the mean gray-level */
    mean = 0.0;
    for (var ih = 0; ih < histogram.length; ih++) {
        mean += ih * histogram[ih];
    }

    mean /= total;
    /* Initial estimate */
    newThresh = mean;

    do {
        oldThresh = newThresh;
        threshold = oldThresh + 0.5 | 0; /* range */

        /* Calculate the means of background and object pixels */
        /* Background */
        sumBack = 0;
        numBack = 0;

        for (var _ih = 0; _ih <= threshold; _ih++) {
            sumBack += _ih * histogram[_ih];
            numBack += histogram[_ih];
        }
        meanBack = numBack === 0 ? 0.0 : sumBack / numBack;

        /* Object */
        sumObj = 0;
        numObj = 0;
        for (var _ih2 = threshold + 1; _ih2 < histogram.length; _ih2++) {
            sumObj += _ih2 * histogram[_ih2];
            numObj += histogram[_ih2];
        }
        meanObj = numObj === 0 ? 0.0 : sumObj / numObj;
        temp = (meanBack - meanObj) / (Math.log(meanBack) - Math.log(meanObj));

        if (temp < -Number.EPSILON) {
            newThresh = temp - 0.5 | 0;
        } else {
            newThresh = temp + 0.5 | 0;
        }
        /*  Stop the iterations when the difference between the
         new and old threshold values is less than the tolerance */
    } while (Math.abs(newThresh - oldThresh) > tolerance);

    return threshold;
}