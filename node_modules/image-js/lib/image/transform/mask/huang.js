"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = huang;
/*
 *
 * see http://rsb.info.nih.gov/ij/developer/source/ij/process/AutoThresholder.java.html.
 * Huang: Implements Huang's fuzzy thresholding method: Huang, L-K & Wang, M-J J (1995),
 * "Image thresholding by minimizing the measure of fuzziness", Pattern Recognition 28(1): 41-51
 *
 */

function huang(histogram) {
    /* Determine the first non-zero bin */
    var firstBin = 0;
    for (var ih = 0; ih < histogram.length; ih++) {
        if (histogram[ih] !== 0) {
            firstBin = ih;
            break;
        }
    }

    /* Determine the last non-zero bin */
    var lastBin = histogram.length - 1;
    for (var _ih = histogram.length - 1; _ih >= firstBin; _ih--) {
        if (histogram[_ih] !== 0) {
            lastBin = _ih;
            break;
        }
    }

    var term = 1.0 / (lastBin - firstBin);
    var mu0 = new Array(histogram.length);
    var sumPix = 0;
    var numPix = 0;
    for (var _ih2 = firstBin; _ih2 < histogram.length; _ih2++) {
        sumPix += _ih2 * histogram[_ih2];
        numPix += histogram[_ih2];
        mu0[_ih2] = sumPix / numPix;
    }

    var mu1 = new Array(histogram.length);
    sumPix = numPix = 0;
    for (var _ih3 = lastBin; _ih3 > 0; _ih3--) {
        sumPix += _ih3 * histogram[_ih3];
        numPix += histogram[_ih3];
        mu1[_ih3 - 1] = sumPix / numPix;
    }

    /* Determine the threshold that minimizes the fuzzy entropy*/
    var threshold = -1;
    var minEnt = Number.MAX_VALUE;
    for (var it = 0; it < histogram.length; it++) {
        var ent = 0;
        var muX = void 0;
        for (var _ih4 = 0; _ih4 <= it; _ih4++) {
            /* Equation (4) in Ref. 1 */
            muX = 1 / (1 + term * Math.abs(_ih4 - mu0[it]));
            if (!(muX < 1e-06 || muX > 0.999999)) {
                /* Equation (6) & (8) in Ref. 1 */
                ent += histogram[_ih4] * (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));
            }
        }

        for (var _ih5 = it + 1; _ih5 < histogram.length; _ih5++) {
            /* Equation (4) in Ref. 1 */
            muX = 1 / (1 + term * Math.abs(_ih5 - mu1[it]));
            if (!(muX < 1e-06 || muX > 0.999999)) {
                /* Equation (6) & (8) in Ref. 1 */
                ent += histogram[_ih5] * (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));
            }
        }

        if (ent < minEnt) {
            minEnt = ent;
            threshold = it;
        }
    }
    return threshold;
}