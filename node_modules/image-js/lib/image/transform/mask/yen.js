"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = yen;
// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java
// Implements Yen  thresholding method
// 1) Yen J.C., Chang F.J., and Chang S. (1995) "A New Criterion
//    for Automatic Multilevel Thresholding" IEEE Trans. on Image
//    Processing, 4(3): 370-378
// 2) Sezgin M. and Sankur B. (2004) "Survey over Image Thresholding
//    Techniques and Quantitative Performance Evaluation" Journal of
//    Electronic Imaging, 13(1): 146-165
//    http://citeseer.ist.psu.edu/sezgin04survey.html
//
// M. Emre Celebi
// 06.15.2007
// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines

function yen(histogram, total) {
    var normHisto = new Array(histogram.length); // normalized histogram
    for (var ih = 0; ih < histogram.length; ih++) {
        normHisto[ih] = histogram[ih] / total;
    }

    var P1 = new Array(histogram.length); // cumulative normalized histogram
    P1[0] = normHisto[0];
    for (var _ih = 1; _ih < histogram.length; _ih++) {
        P1[_ih] = P1[_ih - 1] + normHisto[_ih];
    }

    var P1Sq = new Array(histogram.length);
    P1Sq[0] = normHisto[0] * normHisto[0];
    for (var _ih2 = 1; _ih2 < histogram.length; _ih2++) {
        P1Sq[_ih2] = P1Sq[_ih2 - 1] + normHisto[_ih2] * normHisto[_ih2];
    }

    var P2Sq = new Array(histogram.length);
    P2Sq[histogram.length - 1] = 0.0;
    for (var _ih3 = histogram.length - 2; _ih3 >= 0; _ih3--) {
        P2Sq[_ih3] = P2Sq[_ih3 + 1] + normHisto[_ih3 + 1] * normHisto[_ih3 + 1];
    }

    /* Find the threshold that maximizes the criterion */
    var threshold = -1;
    var maxCrit = Number.MIN_VALUE;
    var crit = void 0;
    for (var it = 0; it < histogram.length; it++) {
        crit = -1.0 * (P1Sq[it] * P2Sq[it] > 0.0 ? Math.log(P1Sq[it] * P2Sq[it]) : 0.0) + 2 * (P1[it] * (1.0 - P1[it]) > 0.0 ? Math.log(P1[it] * (1.0 - P1[it])) : 0.0);
        if (crit > maxCrit) {
            maxCrit = crit;
            threshold = it;
        }
    }
    return threshold;
}