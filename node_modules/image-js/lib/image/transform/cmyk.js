'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = cmyk;

var _model = require('../model/model');

var _Image = require('../Image');

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Make a copy of the current image and convert the color model to CMYK
 * The source image has to be RGB !
 * @memberof Image
 * @instance
 * @return {Image} - New image in CMYK color model
 * @example
 * var cmykImage = image.cmyk();
 * // we can create one image per channel
 * var channels = cmykImage.split();
 */
// http://www.easyrgb.com/index.php?X=MATH&H=18#text18
// check rgbToHsl : https://bgrins.github.io/TinyColor/docs/tinycolor.html

function cmyk() {
    this.checkProcessable('cmyk', {
        bitDepth: [8, 16],
        alpha: [0, 1],
        colorModel: [_model.RGB]
    });

    var newImage = _Image2.default.createFrom(this, {
        components: 4,
        colorModel: _model.CMYK
    });

    var ptr = 0;
    var data = this.data;
    for (var i = 0; i < data.length; i += this.channels) {
        var red = data[i];
        var green = data[i + 1];
        var blue = data[i + 2];

        var black = Math.min(this.maxValue - red, this.maxValue - green, this.maxValue - blue);
        var cyan = (this.maxValue - red - black) / (1 - black / this.maxValue);
        var magenta = (this.maxValue - green - black) / (1 - black / this.maxValue);
        var yellow = (this.maxValue - blue - black) / (1 - black / this.maxValue);

        newImage.data[ptr++] = cyan;
        newImage.data[ptr++] = magenta;
        newImage.data[ptr++] = yellow;
        newImage.data[ptr++] = black;
        if (this.alpha) {
            newImage.data[ptr++] = data[i + 3];
        }
    }

    return newImage;
}