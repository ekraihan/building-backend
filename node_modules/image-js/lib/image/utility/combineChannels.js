'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = combineChannels;

var _Image = require('../Image');

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a new grey Image by combining the channels of the current image.
 * @memberof Image
 * @instance
 * @param {function} method
 * @param {object} [options]
 * @param {boolean} [options.mergeAlpha=false]
 * @param {boolean} [options.keepAlpha=false]
 * @return {Image}
 */
function combineChannels(method = defaultCombineMethod, options = {}) {
    var _options$mergeAlpha = options.mergeAlpha,
        mergeAlpha = _options$mergeAlpha === undefined ? false : _options$mergeAlpha,
        _options$keepAlpha = options.keepAlpha,
        keepAlpha = _options$keepAlpha === undefined ? false : _options$keepAlpha;


    mergeAlpha &= this.alpha;
    keepAlpha &= this.alpha;

    this.checkProcessable('combineChannels', {
        bitDepth: [8, 16]
    });

    var newImage = _Image2.default.createFrom(this, {
        components: 1,
        alpha: keepAlpha,
        colorModel: null
    });

    var ptr = 0;
    for (var i = 0; i < this.size; i++) {
        // TODO quite slow because we create a new pixel each time
        var value = method(this.getPixel(i));
        if (mergeAlpha) {
            newImage.data[ptr++] = value * this.data[i * this.channels + this.components] / this.maxValue;
        } else {
            newImage.data[ptr++] = value;
            if (keepAlpha) {
                newImage.data[ptr++] = this.data[i * this.channels + this.components];
            }
        }
    }

    return newImage;
}

function defaultCombineMethod(pixel) {
    return (pixel[0] + pixel[1] + pixel[2]) / 3;
}