'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = getChannel;

var _Image = require('../Image');

var _Image2 = _interopRequireDefault(_Image);

var _channel = require('./../../util/channel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a grey image based on the selected channel
 * @memberof Image
 * @instance
 * @param {number|string} channel
 * @param {object} [options]
 * @param {boolean} [options.keepAlpha]
 * @param {boolean} [options.mergeAlpha]
 * @return {Image} A grey image with the extracted channel
 */
function getChannel(channel, options = {}) {
    var _options$keepAlpha = options.keepAlpha,
        keepAlpha = _options$keepAlpha === undefined ? false : _options$keepAlpha,
        _options$mergeAlpha = options.mergeAlpha,
        mergeAlpha = _options$mergeAlpha === undefined ? false : _options$mergeAlpha;


    keepAlpha &= this.alpha;
    mergeAlpha &= this.alpha;

    this.checkProcessable('getChannel', {
        bitDepth: [8, 16]
    });

    channel = (0, _channel.validateChannel)(this, channel);

    var newImage = _Image2.default.createFrom(this, {
        components: 1,
        alpha: keepAlpha,
        colorModel: null
    });
    var ptr = 0;
    for (var j = 0; j < this.data.length; j += this.channels) {
        if (mergeAlpha) {
            newImage.data[ptr++] = this.data[j + channel] * this.data[j + this.components] / this.maxValue;
        } else {
            newImage.data[ptr++] = this.data[j + channel];
            if (keepAlpha) {
                newImage.data[ptr++] = this.data[j + this.components];
            }
        }
    }

    return newImage;
}