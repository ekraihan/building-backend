'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Roi = require('./Roi');

var _Roi2 = _interopRequireDefault(_Roi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO check the links for the reference in the docs (@see)

/**
 * A layer that is caracterised by a RoiMap (@see RoiMap) and that will
 * generated automatically the corresponding ROI.
 * ROI should be a continuous
 * surface (it is not tested when it is not continous ...)
 * From the roiMap, the RoiLayer will create the corresponding
 * ROI (@see Roi).
 *
 * @class RoiLayer
 * @private
 * @param {Image} image
 * @param {object} [options]
 */
class RoiLayer {
    constructor(roiMap, options) {
        this.roiMap = roiMap;
        this.options = options;
        this.roi = this.createRoi();
    }

    /**
     * Roi are created from a roiMap
     * The roiMap contains mainty an array of identifiers that define
     * for each data to which Roi it belongs
     * @memberof RoiManager
     * @instance
     * @return {Roi[]}
     */
    createRoi() {
        // we need to find all all the different IDs there is in the data
        var data = this.roiMap.data;
        var mapIDs = {};
        this.roiMap.positive = 0;
        this.roiMap.negative = 0;

        for (var i = 0; i < data.length; i++) {
            if (data[i] && !mapIDs[data[i]]) {
                mapIDs[data[i]] = true;
                if (data[i] > 0) {
                    this.roiMap.positive++;
                } else {
                    this.roiMap.negative++;
                }
            }
        }

        var rois = {};

        for (var mapID in mapIDs) {
            rois[mapID] = new _Roi2.default(this.roiMap, mapID * 1);
        }

        var width = this.roiMap.width;
        var height = this.roiMap.height;

        for (var x = 0; x < width; x++) {
            for (var y = 0; y < height; y++) {
                var target = y * width + x;
                if (data[target] !== 0) {
                    var _mapID = data[target];
                    var roi = rois[_mapID];
                    if (x < roi.minX) {
                        roi.minX = x;
                    }
                    if (x > roi.maxX) {
                        roi.maxX = x;
                    }
                    if (y < roi.minY) {
                        roi.minY = y;
                    }
                    if (y > roi.maxY) {
                        roi.maxY = y;
                    }
                    roi.meanX += x;
                    roi.meanY += y;
                    roi.surface++;
                }
            }
        }

        var roiArray = [];
        for (var _mapID2 in mapIDs) {
            rois[_mapID2].meanX /= rois[_mapID2].surface;
            rois[_mapID2].meanY /= rois[_mapID2].surface;
            roiArray.push(rois[_mapID2]);
        }

        return roiArray;
    }

}
exports.default = RoiLayer;