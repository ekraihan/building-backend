"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * The roiMap is an array of the size of the original image data that contains
 * positive and negative numbers. When the number is common, it corresponds
 * to one region of interest (ROI)
 *
 * @class RoiMap
 * @private
 */
class RoiMap {
    constructor(parent, data) {
        this.parent = parent;
        this.width = parent.width;
        this.height = parent.height;
        this.data = data;
        this.negative = 0;
        this.positive = 0;
    }

    get total() {
        return this.negative + this.positive;
    }

    rowsInfo() {
        var rowsInfo = new Array(this.height);
        var currentRow = 0;
        for (var i = 0; i < this.data.length; i += this.width) {
            var info = {
                row: currentRow,
                positivePixel: 0,
                negativePixel: 0,
                zeroPixel: 0,
                positiveRoi: 0,
                negativeRoi: 0,
                medianChange: 0
            };
            rowsInfo[currentRow++] = info;
            var positives = {};
            var negatives = {};
            var changes = [];
            var previous = this.data[i];
            var current = 0;
            for (var j = i; j < i + this.width; j++) {
                var value = this.data[j];
                if (previous !== value) {
                    previous = value;
                    changes.push(current);
                    current = 0;
                }
                current++;
                if (value > 0) {
                    info.positivePixel++;
                    if (!positives[value]) {
                        positives[value] = true;
                    }
                } else if (value < 0) {
                    info.negativePixel++;
                    if (!negatives[value]) {
                        negatives[value] = true;
                    }
                } else {
                    info.zeroPixel++;
                }
            }
            changes.push(current);
            // TODO use median package
            info.medianChange = changes.sort((a, b) => a - b)[Math.floor(changes.length / 2)];
            info.positiveRoiIDs = Object.keys(positives);
            info.negativeRoiIDs = Object.keys(negatives);
            info.positiveRoi = info.positiveRoiIDs.length;
            info.negativeRoi = info.negativeRoiIDs.length;
        }
        return rowsInfo;
    }

    colsInfo() {
        var colsInfo = new Array(this.width);
        var currentCol = 0;
        for (var i = 0; i < this.width; i++) {
            var info = {
                col: currentCol,
                positivePixel: 0,
                negativePixel: 0,
                zeroPixel: 0,
                positiveRoi: 0,
                negativeRoi: 0,
                medianChange: 0
            };
            colsInfo[currentCol++] = info;
            var positives = {};
            var negatives = {};
            var changes = [];
            var previous = this.data[i];
            var current = 0;
            for (var j = i; j < i + this.data.length; j += this.width) {
                var value = this.data[j];
                if (previous !== value) {
                    previous = value;
                    changes.push(current);
                    current = 0;
                }
                current++;
                if (value > 0) {
                    info.positivePixel++;
                    if (!positives[value]) {
                        positives[value] = true;
                    }
                } else if (value < 0) {
                    info.negativePixel++;
                    if (!negatives[value]) {
                        negatives[value] = true;
                    }
                } else {
                    info.zeroPixel++;
                }
            }
            changes.push(current);
            // TODO use median package
            info.medianChange = changes.sort((a, b) => a - b)[Math.floor(changes.length / 2)];
            info.positiveRoiIDs = Object.keys(positives);
            info.negativeRoiIDs = Object.keys(negatives);
            info.positiveRoi = info.positiveRoiIDs.length;
            info.negativeRoi = info.negativeRoiIDs.length;
        }
        return colsInfo;
    }

}
exports.default = RoiMap;