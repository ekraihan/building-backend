'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = extract;

var _Image = require('../Image');

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Extracts a part of an original image based on a mask. By default the mask may contain
 * a relative position and this part of the original image will be extracted.
 * @memberof Image
 * @instance
 * @param {Image} mask - Image containing a binary mask
 * @param {object} [options]
 * @param {number[]} [options.position] - Array of 2 elements to force the x,y coordinates
 * @return {Image} A new image
 */
function extract(mask, options = {}) {
    var position = options.position;

    this.checkProcessable('extract', {
        bitDepth: [1, 8, 16]
    });

    // we need to find the relative position to the parent
    if (!position) {
        position = mask.getRelativePosition(this);
        if (!position) {
            throw new Error('extract : can not extract an image because the relative position can not be ' + 'determined, try to specify manually the position as an array of 2 elements [x,y].');
        }
    }

    if (this.bitDepth > 1) {
        var _extract = _Image2.default.createFrom(this, {
            width: mask.width,
            height: mask.height,
            alpha: 1, // we force the alpha, otherwise difficult to extract a mask ...
            position: position,
            parent: this
        });

        for (var x = 0; x < mask.width; x++) {
            for (var y = 0; y < mask.height; y++) {
                // we copy the point
                for (var channel = 0; channel < this.channels; channel++) {
                    var value = this.getValueXY(x + position[0], y + position[1], channel);
                    _extract.setValueXY(x, y, channel, value);
                }
                // we make it transparent in case it is not in the mask
                if (!mask.getBitXY(x, y)) {
                    _extract.setValueXY(x, y, this.components, 0);
                }
            }
        }

        return _extract;
    } else {
        var _extract2 = _Image2.default.createFrom(this, {
            width: mask.width,
            height: mask.height,
            position: position,
            parent: this
        });
        for (var _y = 0; _y < mask.height; _y++) {
            for (var _x = 0; _x < mask.width; _x++) {
                if (mask.getBitXY(_x, _y)) {
                    if (this.getBitXY(_x + position[0], _y + position[1])) {
                        _extract2.setBitXY(_x, _y);
                    }
                }
            }
        }

        return _extract2;
    }
}