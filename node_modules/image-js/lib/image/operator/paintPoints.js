'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = paintPoints;

var _model = require('../model/model');

var _Shape = require('../../util/Shape');

var _Shape2 = _interopRequireDefault(_Shape);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Paint pixels on the current image.
 * @memberof Image
 * @instance
 * @param {Array<Array<number>>} points - Array of [x,y] points
 * @param {object} [options]
 * @param {Array<number>} [options.color=[max,0,0]] - Array of 3 elements (R, G, B), default is red.
 * @param {object} [options.shape] - Definition of the shape, see Shape contructor.
 * @return {this} The original painted image
 */
function paintPoints(points, options = {}) {
    var _options$color = options.color,
        color = _options$color === undefined ? [this.maxValue, 0, 0] : _options$color,
        shape = options.shape;


    this.checkProcessable('paintPoints', {
        components: 3,
        bitDepth: [8, 16],
        colorModel: _model.RGB
    });

    var shapePixels = new _Shape2.default(shape).getPoints();

    var numberChannels = Math.min(this.channels, color.length);

    for (var i = 0; i < points.length; i++) {
        var xP = points[i][0];
        var yP = points[i][1];
        for (var j = 0; j < shapePixels.length; j++) {
            var xS = shapePixels[j][0];
            var yS = shapePixels[j][1];
            if (xP + xS >= 0 && yP + yS >= 0 && xP + xS < this.width && yP + yS < this.height) {
                var position = (xP + xS + (yP + yS) * this.width) * this.channels;
                for (var channel = 0; channel < numberChannels; channel++) {
                    this.data[position + channel] = color[channel];
                }
            }
        }
    }

    return this;
}