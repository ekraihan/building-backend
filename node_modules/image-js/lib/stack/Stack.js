'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extend = require('./extend');

var _extend2 = _interopRequireDefault(_extend);

var _Image = require('../image/Image');

var _Image2 = _interopRequireDefault(_Image);

var _hasOwn = require('has-own');

var _hasOwn2 = _interopRequireDefault(_hasOwn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var computedPropertyDescriptor = {
    configurable: true,
    enumerable: false,
    get: undefined
};

/**
 * Class representing stack of images
 * @class Stack
 */
class Stack extends Array {
    constructor(images) {
        if (Array.isArray(images)) {
            super(images.length);
            for (var i = 0; i < images.length; i++) {
                this[i] = images[i];
            }
        } else if (typeof images === 'number') {
            super(images);
        } else {
            super();
        }
        this.computed = null;
    }

    static load(urls) {
        return Promise.all(urls.map(_Image2.default.load)).then(images => new Stack(images));
    }

    static extendMethod(name, method, options = {}) {
        var _options$inPlace = options.inPlace,
            inPlace = _options$inPlace === undefined ? false : _options$inPlace,
            _options$returnThis = options.returnThis,
            returnThis = _options$returnThis === undefined ? true : _options$returnThis,
            _options$partialArgs = options.partialArgs,
            partialArgs = _options$partialArgs === undefined ? [] : _options$partialArgs;


        if (inPlace) {
            Stack.prototype[name] = function (...args) {
                // remove computed properties
                this.computed = null;
                var result = method.apply(this, [...partialArgs, ...args]);
                if (returnThis) {
                    return this;
                }
                return result;
            };
        } else {
            Stack.prototype[name] = function (...args) {
                return method.apply(this, [...partialArgs, ...args]);
            };
        }
        return Stack;
    }

    static extendProperty(name, method, options = {}) {
        var _options$partialArgs2 = options.partialArgs,
            partialArgs = _options$partialArgs2 === undefined ? [] : _options$partialArgs2;


        computedPropertyDescriptor.get = function () {
            if (this.computed === null) {
                this.computed = {};
            } else if ((0, _hasOwn2.default)(name, this.computed)) {
                return this.computed[name];
            }
            var result = method.apply(this, partialArgs);
            this.computed[name] = result;
            return result;
        };
        Object.defineProperty(Stack.prototype, name, computedPropertyDescriptor);
        return Stack;
    }

    /**
     * Check if a process can be applied on the stack
     * @param {string} processName
     * @param {object} [options]
     * @private
     */
    checkProcessable(processName, options = {}) {
        if (typeof processName !== 'string') {
            throw new TypeError('checkProcessable requires as first parameter the processName (a string)');
        }
        if (this.size === 0) {
            throw new TypeError('The process: ' + processName + ' can not be applied on an empty stack');
        }
        this[0].checkProcessable(processName, options);
        for (var i = 1; i < this.length; i++) {
            if ((options.sameSize === undefined || options.sameSize) && this[0].width !== this[i].width) {
                throw new TypeError('The process: ' + processName + ' can not be applied if width is not identical in all images');
            }
            if ((options.sameSize === undefined || options.sameSize) && this[0].height !== this[i].height) {
                throw new TypeError('The process: ' + processName + ' can not be applied if height is not identical in all images');
            }
            if ((options.sameAlpha === undefined || options.sameAlpha) && this[0].alpha !== this[i].alpha) {
                throw new TypeError('The process: ' + processName + ' can not be applied if alpha is not identical in all images');
            }
            if ((options.sameBitDepth === undefined || options.sameBitDepth) && this[0].bitDepth !== this[i].bitDepth) {
                throw new TypeError('The process: ' + processName + ' can not be applied if bitDepth is not identical in all images');
            }
            if ((options.sameColorModel === undefined || options.sameColorModel) && this[0].colorModel !== this[i].colorModel) {
                throw new TypeError('The process: ' + processName + ' can not be applied if colorModel is not identical in all images');
            }
            if ((options.sameNumberChannels === undefined || options.sameNumberChannels) && this[0].channels !== this[i].channels) {
                throw new TypeError('The process: ' + processName + ' can not be applied if channels is not identical in all images');
            }
        }
    }
}

exports.default = Stack;
if (!Array[Symbol.species]) {
    // support old engines
    Stack.prototype.map = function (cb, thisArg) {
        if (typeof cb !== 'function') {
            throw new TypeError(cb + ' is not a function');
        }
        var newStack = new Stack(this.length);
        for (var i = 0; i < this.length; i++) {
            newStack[i] = cb.call(thisArg, this[i], i, this);
        }
        return newStack;
    };
}

(0, _extend2.default)(Stack);